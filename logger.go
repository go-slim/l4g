package l4g

import (
	"bytes"
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"sync/atomic"
	"time"
)

// These flags define which text to prefix to each log entry generated by the [Logger].
// Bits are or'ed together to control what's printed.
// With the exception of the Lmsgprefix flag, there is no
// control over the order they appear (the order listed here)
// or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//
//	2009/01/23 01:23:23 message
//
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//
//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
	Ldate         = 1 << iota // the date in the local time zone: 2009/01/23
	Ltime                     // the time in the local time zone: 01:23:23
	Lmicroseconds             // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                 // full file name and line number: /a/b/c/d.go:23
	Lshortfile                // final file name element and line number: d.go:23. overrides Llongfile
	LUTC                      // if Ldate or Ltime is set, use UTC rather than the local time zone
	Lmsgprefix                // move the "prefix" from the beginning of the line to before the message
	Llevel                    // move the "prefix" from the beginning of the line to before the message
	Lstacktrace               // move the "prefix" from the beginning of the line to before the message

	// LstdFlags initial values for the standard logger
	LstdFlags = Ldate | Ltime | Llevel | Lstacktrace
)

type Level int

const (
	DEBUG Level = iota + 1
	INFO
	WARN
	ERROR
	PANIC
	FATAL
)

// String returns an all-caps ASCII representation of the log level.
func (l Level) String() string {
	// Printing levels in all-caps is common enough that we should export this
	// functionality.
	switch l {
	case DEBUG:
		return "DEBUG"
	case INFO:
		return "INFO"
	case WARN:
		return "WARN"
	case ERROR:
		return "ERROR"
	case PANIC:
		return "PANIC"
	case FATAL:
		return "FATAL"
	default:
		return fmt.Sprintf("LEVEL(%d)", l)
	}
}

// A Logger represents an active logging object that generates lines of
// output to an [io.Writer]. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	outMu sync.Mutex
	out   io.Writer // destination for output

	level           atomic.Int32
	stacktraceLevel atomic.Int32

	prefix    atomic.Pointer[string] // prefix on each line to identify the logger (but see Lmsgprefix)
	flag      atomic.Int32           // properties
	isDiscard atomic.Bool
}

type Option func(*Logger)

func WithLevel(level Level) Option       { return func(l *Logger) { l.SetLevel(level) } }
func WithStacktrace(level Level) Option  { return func(l *Logger) { l.SetStacktraceLevel(level) } }
func WithFlags(flag int) Option          { return func(l *Logger) { l.SetFlags(flag) } }
func WithPrefix(prefix string) Option    { return func(l *Logger) { l.SetPrefix(prefix) } }
func WithWriter(writer io.Writer) Option { return func(l *Logger) { l.SetOutput(writer) } }

// New creates a new [Logger]. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line, or
// after the log header if the [Lmsgprefix] flag is provided.
// The flag argument defines the logging properties.
func New(out io.Writer, options ...Option) *Logger {
	l := new(Logger)
	l.SetOutput(out)
	l.SetPrefix("")
	l.SetFlags(LstdFlags)
	for _, option := range options {
		option(l)
	}
	return l
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
	l.outMu.Lock()
	defer l.outMu.Unlock()
	l.out = w
	l.isDiscard.Store(w == io.Discard)
}

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
	// Assemble decimal in reverse order.
	var b [20]byte
	bp := len(b) - 1
	for i >= 10 || wid > 1 {
		wid--
		q := i / 10
		b[bp] = byte('0' + i - q*10)
		bp--
		i = q
	}
	// i < 10
	b[bp] = byte('0' + i)
	*buf = append(*buf, b[bp:]...)
}

// formatHeader writes log header to buf in following order:
//   - l.prefix (if it's not blank and Lmsgprefix is unset),
//   - date and/or time (if corresponding flags are provided),
//   - file and line number (if corresponding flags are provided),
//   - l.prefix (if it's not blank and Lmsgprefix is set).
func formatHeader(buf *[]byte, t time.Time, prefix string, flag int, level Level, file string, line int) {
	if flag&Lmsgprefix == 0 {
		*buf = append(*buf, prefix...)
	}
	if flag&Llevel != 0 {
		*buf = append(*buf, level.String()...)
	}
	if flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if flag&LUTC != 0 {
			t = t.UTC()
		}
		if flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if flag&(Lshortfile|Llongfile) != 0 {
		if flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
	if flag&Lmsgprefix != 0 {
		*buf = append(*buf, prefix...)
	}
}

var bufferPool = sync.Pool{New: func() any { return new([]byte) }}

func getBuffer() *[]byte {
	p := bufferPool.Get().(*[]byte)
	*p = (*p)[:0]
	return p
}

func putBuffer(p *[]byte) {
	// Proper usage of a sync.Pool requires each entry to have approximately
	// the same memory cost. To obtain this property when the stored type
	// contains a variably-sized buffer, we add a hard limit on the maximum buffer
	// to place back in the pool.
	//
	// See https://go.dev/issue/23199
	if cap(*p) > 64<<10 {
		*p = nil
	}
	bufferPool.Put(p)
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not
// already a newline. Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(calldepth int, level Level, s string) error {
	calldepth++ // +1 for this frame.
	return l.output(calldepth, level, func(b []byte) []byte {
		return append(b, s...)
	})
}

// output can take either a calldepth or a pc to get source line information.
// It uses the pc if it is non-zero.
func (l *Logger) output(calldepth int, level Level, appendOutput func([]byte) []byte) error {
	if l.isDiscard.Load() || !l.Enabled(level) {
		return nil
	}

	now := time.Now() // get this early.

	// Load prefix and flag once so that their value is consistent within
	// this call regardless of any concurrent changes to their value.
	prefix := l.Prefix()
	flag := l.Flags()

	var file string
	var line int
	if flag&(Lshortfile|Llongfile) != 0 {
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
	}

	buf := getBuffer()
	defer putBuffer(buf)
	formatHeader(buf, now, prefix, flag, level, file, line)
	*buf = appendOutput(*buf)
	if len(*buf) == 0 || (*buf)[len(*buf)-1] != '\n' {
		*buf = append(*buf, '\n')
	}
	if l.stacktraceLevel.Load() <= int32(level) && flag&Lstacktrace != 0 {
		stacktrace(buf, calldepth)
	}

	l.outMu.Lock()
	defer l.outMu.Unlock()
	_, err := l.out.Write(*buf)
	return err
}

// stacktrace will skip back the provided number of frames and return a stack trace with source code.
// Although we could just use debug.Stack(), this routine will return the source code and
// skip back the provided number of frames - i.e. allowing us to ignore preceding function calls.
// A skip of 0 returns the stack trace for the calling function, not including this call.
// If the problem is a lack of memory of course all this is not going to work...
func stacktrace(buf *[]byte, skip int) {
	// Store the last file we opened as its probable that the preceding stack frame
	// will be in the same file
	var lines [][]byte
	var lastFilename string
	// for i := skip + 1; ; i++ { // Skip over frames
	for i := skip; ; i++ { // Skip over frames
		programCounter, filename, lineNumber, ok := runtime.Caller(i)
		// If we can't retrieve the information break - basically we're into go internals at this point.
		if !ok {
			break
		}

		// Append equivalent of debug.Stack()
		*buf = fmt.Appendf(*buf, "%s:%d (0x%x)\n", filename, lineNumber, programCounter)
		// Now try to print the offending line
		if filename != lastFilename {
			data, err := os.ReadFile(filename)
			if err != nil {
				// can't read this source file
				// likely we don't have the sourcecode available
				continue
			}
			lines = bytes.Split(data, []byte{'\n'})
			lastFilename = filename
		}
		*buf = fmt.Appendf(*buf, "\t%s: %s\n", functionName(programCounter), source(lines, lineNumber))
	}
}

var unknown = []byte("???")

// functionName converts the provided programCounter into a function name
func functionName(programCounter uintptr) []byte {
	function := runtime.FuncForPC(programCounter)
	if function == nil {
		return unknown
	}
	name := []byte(function.Name())

	// Because we provide the filename we can drop the preceding package name.
	if lastslash := bytes.LastIndex(name, []byte("/")); lastslash >= 0 {
		name = name[lastslash+1:]
	}
	// And the current package name.
	if period := bytes.Index(name, []byte(".")); period >= 0 {
		name = name[period+1:]
	}
	// And we should just replace the interpunct with a dot
	name = bytes.ReplaceAll(name, []byte("·"), []byte("."))
	return name
}

// source returns a space-trimmed slice of the n'th line.
func source(lines [][]byte, n int) []byte {
	n-- // in stack trace, lines are 1-indexed but our array is 0-indexed
	if n < 0 || n >= len(lines) {
		return unknown
	}
	return bytes.TrimSpace(lines[n])
}

func (l *Logger) log(calldepth int, level Level, appendOutput func([]byte) []byte) {
	err := l.output(calldepth, level, appendOutput)
	if err != nil {
		FallbackErrorf("unable to write log message: %v", err)
	}
}

// Debug calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Print].
func (l *Logger) Debug(v ...any) {
	l.log(2, DEBUG, func(b []byte) []byte {
		return fmt.Append(b, v...)
	})
}

// Debugf calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Printf].
func (l *Logger) Debugf(format string, v ...any) {
	l.log(2, DEBUG, func(b []byte) []byte {
		return fmt.Appendf(b, format, v...)
	})
}

// Debugln calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Println].
func (l *Logger) Debugln(v ...any) {
	l.log(2, DEBUG, func(b []byte) []byte {
		return fmt.Appendln(b, v...)
	})
}

// Info calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Print].
func (l *Logger) Info(v ...any) {
	l.log(2, INFO, func(b []byte) []byte {
		return fmt.Append(b, v...)
	})
}

// Infof calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Printf].
func (l *Logger) Infof(format string, v ...any) {
	l.log(2, INFO, func(b []byte) []byte {
		return fmt.Appendf(b, format, v...)
	})
}

// Infoln calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Println].
func (l *Logger) Infoln(v ...any) {
	l.log(2, INFO, func(b []byte) []byte {
		return fmt.Appendln(b, v...)
	})
}

// Warn calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Print].
func (l *Logger) Warn(v ...any) {
	l.log(2, WARN, func(b []byte) []byte {
		return fmt.Append(b, v...)
	})
}

// Warnf calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Printf].
func (l *Logger) Warnf(format string, v ...any) {
	l.log(2, WARN, func(b []byte) []byte {
		return fmt.Appendf(b, format, v...)
	})
}

// Warnln calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Println].
func (l *Logger) Warnln(v ...any) {
	l.log(2, WARN, func(b []byte) []byte {
		return fmt.Appendln(b, v...)
	})
}

// Error calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Print].
func (l *Logger) Error(v ...any) {
	l.log(2, ERROR, func(b []byte) []byte {
		return fmt.Append(b, v...)
	})
}

// Errorf calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Printf].
func (l *Logger) Errorf(format string, v ...any) {
	l.log(2, ERROR, func(b []byte) []byte {
		return fmt.Appendf(b, format, v...)
	})
}

// Errorln calls l.Output to print to the logger.
// Arguments are handled in the manner of [fmt.Println].
func (l *Logger) Errorln(v ...any) {
	l.log(2, ERROR, func(b []byte) []byte {
		return fmt.Appendln(b, v...)
	})
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...any) {
	s := fmt.Sprint(v...)
	l.log(2, PANIC, func(b []byte) []byte {
		return append(b, s...)
	})
	panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...any) {
	s := fmt.Sprintf(format, v...)
	l.log(2, PANIC, func(b []byte) []byte {
		return append(b, s...)
	})
	panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...any) {
	s := fmt.Sprintln(v...)
	l.log(2, PANIC, func(b []byte) []byte {
		return append(b, s...)
	})
	panic(s)
}

// Fatal is equivalent to l.Print() followed by a call to [os.Exit](1).
func (l *Logger) Fatal(v ...any) {
	l.log(2, FATAL, func(b []byte) []byte {
		return fmt.Append(b, v...)
	})
	OsExiter(1)
}

// Fatalf is equivalent to l.Printf() followed by a call to [os.Exit](1).
func (l *Logger) Fatalf(format string, v ...any) {
	l.log(2, FATAL, func(b []byte) []byte {
		return fmt.Appendf(b, format, v...)
	})
	OsExiter(1)
}

// Fatalln is equivalent to l.Println() followed by a call to [os.Exit](1).
func (l *Logger) Fatalln(v ...any) {
	l.log(2, FATAL, func(b []byte) []byte {
		return fmt.Appendln(b, v...)
	})
	OsExiter(1)
}

// Flags returns the output flags for the logger.
// The flag bits are [Ldate], [Ltime], and so on.
func (l *Logger) Flags() int {
	return int(l.flag.Load())
}

// SetFlags sets the output flags for the logger.
// The flag bits are [Ldate], [Ltime], and so on.
func (l *Logger) SetFlags(flag int) {
	l.flag.Store(int32(flag))
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
	if p := l.prefix.Load(); p != nil {
		return *p
	}
	return ""
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
	l.prefix.Store(&prefix)
}

func (l *Logger) Level() Level {
	return Level(l.level.Load())
}

func (l *Logger) SetLevel(level Level) {
	l.level.Store(int32(level))
}

// Enabled reports whether l emits log records at the given context and level.
func (l *Logger) Enabled(level Level) bool {
	return l.Level() <= level
}

func (l *Logger) StacktraceLevel() Level {
	return Level(l.stacktraceLevel.Load())
}

func (l *Logger) SetStacktraceLevel(level Level) {
	l.stacktraceLevel.Store(int32(level))
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
	l.outMu.Lock()
	defer l.outMu.Unlock()
	return l.out
}
